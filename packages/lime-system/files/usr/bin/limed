#!/usr/bin/lua

--! LibreMesh community mesh networks meta-firmware
--!
--! Copyright (C) 2024  Gioacchino Mazzurco <gio@polymathes.cc>
--! Copyright (C) 2024  Asociaci√≥n Civil Altermundi <info@altermundi.net>
--!
--! SPDX-License-Identifier: AGPL-3.0-only

local config = require("lime.config")

local limed = {};

limed.__PRIVATE_APUP_ENABLED = nil

function limed.APUP_ENABLED()
	if limed.__PRIVATE_APUP_ENABLED ~= nil then
		return limed.__PRIVATE_APUP_ENABLED
	end

	function check_apup_mode_cb(section)
		if(section['modes'] == null) then return end

		for _,mode in pairs(section['modes']) do
			if(mode == 'apup') then
				limed.__PRIVATE_APUP_ENABLED = true;
				return limed.__PRIVATE_APUP_ENABLED;
			end
		end
	end

	config.foreach(nil, check_apup_mode_cb)
	return limed.__PRIVATE_APUP_ENABLED
end

-- No need to run if APuP is not enabled in configuration
if not limed.APUP_ENABLED() then os.exit(0) end;

local uloop = require("uloop");
local network = require("lime.network")

local function dumptable(table, nesting)
  local nesting = nesting or 1
  if type(table) ~= "table" then
    print("dumptable: first argument is expected to be a table but you passed a", type(table), table)
  else
    if next(table) == nil then
      print(table, "empty")
    else
      for k,v in pairs(table) do
        print(string.rep('\t', nesting), k, ' = ', v)
        if type(v) == 'table' then dumptable(v, nesting+1) end
      end
    end
  end
end

local libubus = require("ubus")
local ubus = libubus.connect()

local peerSubscriber = {
	notify = function(nData, nType)
		if nType ~= "apup-newpeer" then return end

		print("peerSubscriber:", nType, nData.ifname)
		network.createStatic(nData.ifname)
		network.runProtocols(nData.ifname)
	end
}

local apupSubscriber = {
	notify = function(nData, nType)
		if nType ~= "bss.add" then return end

		local apupDev = string.match(nData["name"], "wlan%d+%-apup");
		if not apupDev then return end

		local evPath = "hostapd." .. apupDev

		print("Subscribing:", evPath)
		ubus:subscribe(evPath, peerSubscriber)
	end
}

uloop.init();
ubus:subscribe("hostapd", apupSubscriber)
uloop.run();
