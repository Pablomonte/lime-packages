#!/usr/bin/env lua

local json = require 'luci.jsonc'
local mesh_config = require 'lime-mesh-config'
local ubus = require "ubus"
local utils = require "lime.utils"

local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end

local function get_node_status(msg)
    return utils.printJson(mesh_config.get_node_status())
end

local function get_community_config(msf)
    local result =  {
        file_contents = mesh_config.get_community_config()
    }
return utils.printJson(result)
end

local function start_config_transaction(msg)
    local result =  mesh_config.start_config_transaction(msg.file_contents)
    return utils.printJson(result)
end

local function  start_safe_reboot(msg)
    local result =  mesh_config.start_safe_reboot(msg.start_delay ,msg.confirm_timeout)

    return utils.printJson(result)
end
-- to be called after successfully reboot 
local function confirm(msg)
    local result =  mesh_config.confirm()
    return utils.printJson(result)
end

local function abort(msg)
    local result =  mesh_config.abort(false)
    return utils.printJson(result)
end

local methods = {
    become_main_node = {
        url = 'value'
    },
    start_config_transaction = {
        file_contents = 'value'
    },
    get_node_status = {
        no_params = 0
    },
    get_community_config = {
        no_params = 0
    },
    start_safe_reboot = {
        confirm_timeout = 0,
        start_delay = 0,
    },
    confirm = {
        no_params = 0
    },
    abort = {
        no_params = 0
    }

}

if arg[1] == 'list' then
    utils.printJson(methods)
end

if arg[1] == 'call' then
    local msg = utils.rpcd_readline()
    msg = json.parse(msg)
    if arg[2] == 'become_main_node' then
        become_main_node(msg)
    elseif arg[2] == 'start_config_transaction' then
        start_config_transaction(msg)
    elseif arg[2] == 'get_node_status' then
        get_node_status(msg)
    elseif arg[2] == 'start_safe_reboot' then
        start_safe_reboot(msg)
    elseif arg[2] == 'get_community_config' then
        get_community_config(msg)
    elseif arg[2] == 'confirm' then
        confirm(msg)
    elseif arg[2] == 'abort' then
        abort(msg)
    else
        utils.printJson({
            error = "Method not found"
        })
    end
end
