#!/usr/bin/env lua

local json = require 'luci.jsonc'
local mesh_upgrade = require 'lime-mesh-config'
local ubus = require "ubus"

local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end
local sample_config= [[
config lime system
	option deferable_reboot_uptime_s '654321' # reboot every 7.5 days 

config lime network
	option main_ipv4_address '10.1.128.0/16/17'
	option anygw_dhcp_start '2562'
	option anygw_dhcp_limit '30205'
	option batadv_orig_interval '5000'

config lime wifi		
	option country 'ES'	
	option ap_ssid 'Calafou-to-be-configured'
	option apname_ssid 'Calafou/%H-to-be-configured'
	option ieee80211s_mesh_id 'libremesh'

config lime-wifi-band '2ghz' 
	option channel '1'
	option htmode 'HT40'
	list modes 'ap'	
	list modes 'apname'
	list modes 'ieee80211s'
	option distance '300'

config lime-wifi-band '5ghz'
	option channel '36'
	option htmode 'VHT80'
	list modes 'ieee80211s'
	option distance '300'

config net lan1onlymesh
	option linux_name 'lan1'
	#list protocols lan # we want all the protocols but LAN, as this ethernet port will be used for meshing, not for clients access
	list protocols anygw
	list protocols batadv:%N1
	list protocols babeld:17

config net lan2onlymesh
	option linux_name 'lan2'
	#list protocols lan # we want all the protocols but LAN, as this ethernet port will be used for meshing, not for clients access
	list protocols anygw
	list protocols batadv:%N1
	list protocols babeld:17

config generic_uci_config prometheus
	list uci_set "prometheus-node-exporter-lua.main.listen_interface=lan"

config run_asset prometheus_enable
	option asset 'community/prometheus_enable'
	option when 'ATFIRSTBOOT'
]]

local sample_status = [[{
    // "repo_url": "http://10.13.115.170/config/",
    "lime-config": "config lime network\n\toption main_ipv4_address '10.1.128.0/16/17'\n\toption anygw_dhcp_start '2562'\n\toption anygw_dhcp_limit '30205'\n\toption batadv_orig_interval '5000'\n",
    "safe_restart_remining": -1,
    "safe_restart_start_mark": 0,
    "transaction_state": "DEFAULT",
    "current_config_hash": "asdsadasd2331", // Hash de la configuracion actual (para saber si la configuracion actual del main node es distinta a la del nodo local y guardarla)
    "new_config_hash": "asdsadasd2331", // Hash de la nueva config (why?)
    "main_node": "NO",
    "node_ip": "10.13.40.149",
    "safe_restart_start_time_out": 0,
    "timestamp": 0,
    "error": "0",
    "retry_count": 0
}]]

local function become_main_node(msg)
    local result = {
        code = "SUCCESS",
        error = ""
    }
    return utils.printJson(result)
end

local function generateEscapedtext(bigText)
    -- Escape the text for JSON
    local escapedText = bigText:gsub('"', '\\"') -- Escape double quotes
    escapedText = escapedText:gsub('\n', '\\n') -- Escape newlines
    escapedText = escapedText:gsub('\r', '\\r') -- Escape carriage returns
    escapedText = escapedText:gsub('\t', '\\t') -- Escape tabs
    return escapedText
end


local function get_node_status(msg)
    return utils.print(sample_status)
end

local function get_comunity_config(msf)
    local result =  {
        file_contents = generateEscapedtext(sample_config)
    }
return utils.printJson(result)
end

local function start_config_transaction(msg)
    local result =  {
        code = "SUCCESS",
        error = ""
    }
    return utils.printJson(result)
end

local function  start_safe_reboot(msg)
    local result =  {
        code = "SUCCESS",
        error = ""
    }
    return utils.printJson(result)
end
-- to be called after successfully reboot 
local function confirm(msg)
    local result =   {
        code = "SUCCESS",
        error = ""
    }
    return utils.printJson(result)
end

local function abort(msg)
    local result = {
        code = "SUCCESS",
        error = ""
    }
    return utils.printJson(result)
end

local methods = {
    become_main_node = {
        url = 'value'
    },
    start_config_transaction = {
        file_contents = 'value'
    },
    get_node_status = {
        no_params = 0
    },
    get_comunity_config = {
        no_params = 0
    },
    start_safe_reboot = {
        confirm_timeout = 0,
        start_delay = 0,
    },
    confirm = {
        no_params = 0
    },
    abort = {
        no_params = 0
    }

}

if arg[1] == 'list' then
    utils.printJson(methods)
end

if arg[1] == 'call' then
    local msg = utils.rpcd_readline()
    msg = json.parse(msg)
    if arg[2] == 'become_main_node' then
        become_main_node(msg)
    elseif arg[2] == 'start_config_transaction' then
        start_config_transaction(msg)
    elseif arg[2] == 'get_node_status' then
        get_node_status(msg)
    elseif arg[2] == 'start_safe_reboot' then
        start_safe_reboot(msg)
    elseif arg[2] == 'get_comunity_config' then
        get_comunity_config(msg)
    elseif arg[2] == 'confirm' then
        confirm(msg)
    elseif arg[2] == 'abort' then
        abort(msg)
    else
        utils.printJson({
            error = "Method not found"
        })
    end
end
