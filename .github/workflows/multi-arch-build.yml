name: Multi arch build packages

on:
  release:
    types: [published]
  push:
    branches: [master]
    tags:
      - v*
      - '!v2020*'
    paths:
      - ".github/workflows/multi-arch-build.yml"
      - 'packages/shared-state-async/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Build packages using the openwrt sdk
# for each architecture supported
# in openwrt branches 'main', 'stable', 'old-stable'
env:
# NOTE:
# workaround: build a package that selects '+shared-state-async'
# as 'make package/shared-state-async/check' fails with 'Package HASH check failed'
  PACKAGES: "shared-state-bat_hosts"

jobs:
  generate_matrix:
    name: 'Generate matrix'
    runs-on: ubuntu-latest
    outputs:
      matrix_builds: ${{ steps.define_matrix.outputs.matrix_builds }}
      dest_dir: ${{ steps.set_package_destination.outputs.DEST_DIR }}
    steps:
      - name: Set package destination
        id: set_package_destination
        run: |
          export TAG=$(echo "${{ github.ref }}" | cut -d '/' -f 3- | perl -pe 's/v([0-9])/$1/')
          echo "$TAG"
          echo "DEST_DIR=$TAG" >> $GITHUB_OUTPUT

      - name: Define matrix of branches and archs
        id: define_matrix
        run: |
          JSON='['
          FIRST_BUILD=1
          versions=$(curl https://downloads.openwrt.org/.versions.json)
          stable=$(echo $versions | jq | grep \"stable_ | sed 's|.*\"stable_version\": \"\(.*\)\",|\1|')
          oldstable=$(echo $versions | jq | grep oldstable_ | sed 's|.*\"oldstable_version\": \"\(.*\)\",|\1|')

          for version in "main" "${stable:0:5}" "${oldstable:0:5}"; do

            VERSION=$([ "$version" == "main" ] \
              && echo "main" || echo "openwrt-$version")
            echo $VERSION

            VERSION_PATH=$([ "$version" == "main" ] \
              && echo "snapshots/packages" || echo "releases/packages-$version")
            echo $VERSION_PATH

            OPENWRT_BRANCH_PATH=$([ "$version" == "main" ] \
              && echo "openwrt-main" || echo "openwrt-$version")
            echo $OPENWRT_BRANCH_PATH

            wget -r -nH --no-parent --level 1 --accept html -P. \
              --directory-prefix=. https://downloads.openwrt.org/$VERSION_PATH/  

            for arch in $(ls ./$VERSION_PATH/ | grep -v html); do
              [[ $FIRST_BUILD -ne 1 ]] && JSON="$JSON"','
              FIRST_BUILD=0

              JSON="$JSON"'{"version": "'"$VERSION"'" ,"arch": "'"$arch"'", "openwrt_branch_path": "'"$OPENWRT_BRANCH_PATH"'" }'
              echo $JSON
            done
          done

          matrix_include='{"include": '"$JSON"']}'
          echo "matrix_builds=${matrix_include}" >> "$GITHUB_OUTPUT"
          
  build:
    name: build ${{ matrix.arch }}-${{ matrix.version }}
    runs-on: ubuntu-latest
    needs: generate_matrix
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{ fromJson(needs.generate_matrix.outputs.matrix_builds) }}
      # matrix:
      #   include:
      #     - { version: main, arch: x86_64, openwrt_branch_path: 'openwrt-main'}
      #     - { version: main, arch: mips_24kc, openwrt_branch_path: 'openwrt-main'}
    steps:
      - uses: actions/checkout@v4

      - name: Build packages ${{ matrix.arch }}-${{ matrix.version }}
        uses: openwrt/gh-action-sdk@v7
        env:
          ARCH: "${{ matrix.arch }}-${{ matrix.version }}"
          FEEDNAME: "libremesh"
          IGNORE_ERRORS: "n m y"
          KEY_BUILD: "${{ matrix.version != 'main' && secrets.KEY_BUILD || '' }}"
          PACKAGES: "${{ env.PACKAGES }}"
          INDEX: 1
          NO_DEFAULT_FEEDS: 1
          NO_REFRESH_CHECK: 1
          NO_SHFMT_CHECK: 1

      - name: upload artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}-${{ matrix.version }}
          path: bin/packages/${{ matrix.arch }}/libremesh/

  publish:
    name: publish ${{ github.ref }}
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [generate_matrix, build]
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix: ${{ fromJson(needs.generate_matrix.outputs.matrix_builds) }}
      # matrix:
      #   include:
      #     - { version: main, arch: x86_64, openwrt_branch_path: 'openwrt-main'}
      #     - { version: main, arch: mips_24kc, openwrt_branch_path: 'openwrt-main'}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: "${{ matrix.arch }}-${{ matrix.version }}"
          path: artifacts

      - name: Upload packages to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          external_repository: libremesh/lime-feed
          publish_dir: ./artifacts/
          destination_dir: arch_packages/${{ needs.generate_matrix.outputs.dest_dir }}/${{ matrix.openwrt_branch_path }}/${{ matrix.arch }}/
